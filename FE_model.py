# -*- coding: utf-8 -*-
"""Membuat FE Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UwWVoGltG7EHh0NPuIsW9lNXg7WnqdE9

# Import Libraries
"""

import pandas as pd
import numpy as np
import joblib
import os
from sklearn.base import BaseEstimator, TransformerMixin
from sklearn.model_selection import train_test_split



"""# Load Data"""

# --- 1. Load Data dan Preprocessing Awal (sesuai notebook Colab Anda) ---
# Asumsi Anda menjalankan script ini di lingkungan di mana 'train.csv' bisa diakses.
# Jika tidak, ganti path sesuai lokasi file Anda.

try:
    # Memuat data. Pastikan path ini benar di lingkungan Anda.
    # Jika Anda menjalankan di Colab, mungkin perlu mount Google Drive atau upload file.
    df = pd.read_csv(r'D:\FINAL_PROJECT_1\train.csv')
    print("Data train.csv berhasil dimuat.")

except FileNotFoundError:
    print("Error: train.csv tidak ditemukan. Pastikan file ada di direktori yang sama atau berikan path yang benar.")
    exit() # Keluar jika file tidak ditemukan

# Menghilangkan kolom 'id', 'waist(cm)',  dan duplikat
# Menggunakan .copy() untuk menghindari SettingWithCopyWarning
df = df.drop(columns=['id']).copy()
df = df.drop(columns=['waist(cm)']).copy()
df = df.drop_duplicates().copy()

# Pisahkan data menjadi df_train dan df_train (target 'smoking' juga ikut dipisah)
# Kita akan menggunakan df_train untuk melatih Feature Engineer
df_train, _ = train_test_split(df, test_size=0.3, random_state=42, shuffle=True)

# Memastikan df_train adalah salinan agar operasi di dalamnya tidak memengaruhi df asli
df_train = df_train.copy()

print(f"Shape df_train setelah split dan preprocessing: {df_train.shape}")

df_train.info()

"""# Prepare the Transformation Function"""

# --- 2. Definisikan Fungsi-fungsi Kategori (sesuai notebook Colab Anda) ---

# Fungsi untuk age_catg
def age_group(age):
    if 20 <= age < 40:
        return 1 # high prob
    elif 40 <= age <= 50:
        return 2 # medium prob
    elif 50 < age <= 60:
        return 3 # low prob
    elif age > 60:
        return 4

# Fungsi untuk BMI_catg
def BMI_category(BMI):
    if BMI < 18.5:
        return 1 # Underweight
    elif 18.5 <= BMI < 25:
        return 2 # Normal weight
    elif 25 <= BMI < 30:
        return 3 # Overweight
    elif 30 <= BMI < 35:
        return 4 # Obesity 1
    elif 35 <= BMI <= 40:
        return 5 # Obesity 2
    elif BMI > 40:
        return 6 # Obesity 3


# Fungsi untuk ESL_catg
def ESL_catg(eyesight):
    if 0.1 <= eyesight <= 0.6:
        return 1 # low prob
    elif 0.6 < eyesight <= 1.3:
        return 2 # medium prob
    elif 1.3 < eyesight <= 2.0:
        return 3 # high prob
    else: # Menangani nilai di luar rentang yang terdefinisi
        return 1 # Default ke kategori 1 jika tidak sesuai rentang di atas

# Fungsi untuk ESR_catg
def ESR_catg(eyesight):
    if 0.1 <= eyesight <= 0.7:
        return 1 # low prob
    elif 0.7 < eyesight <= 1.3:
        return 2 # medium prob
    elif 1.3 < eyesight <= 2.0:
        return 3 # high prob
    else: # Menangani nilai di luar rentang yang terdefinisi
        return 1 # Default ke kategori 1 jika tidak sesuai rentang di atas


# Fungsi untuk Blood Pressure
def map_blood_pressure(systolic, relaxation):
    if (systolic < 120) and (relaxation < 80):
        return 1  # Normal
    elif (systolic >= 120 and systolic <= 129) and (relaxation < 80):
        return 2  # Elevated
    elif (systolic >= 130 and systolic <= 139) or (relaxation >= 80 and relaxation <= 89):
        return 3  # High Stage 1
    elif (systolic >= 180) or (relaxation >= 120):
        return 5  # Hypertensive Crisis
    elif (systolic >= 140) or (relaxation >= 90):
        return 4  # High Stage 2
    else:
        return None


# Fungsi untuk BS_catg (fasting blood sugar)
def BS_catg(fasting_blood_sugar):
    if fasting_blood_sugar <= 100:
        return 1 # Normal
    elif 100 < fasting_blood_sugar <= 125:
        return 2 # Prediabetes
    elif fasting_blood_sugar >= 126:
        return 3 # Diabetes
    return np.nan

# Fungsi untuk chol (Cholesterol)
def chol(Cholesterol):
    if Cholesterol < 200:
        return 1 # Optimal
    elif 200 <= Cholesterol <= 239:
        return 2 # Borderline High
    elif Cholesterol >= 240:
        return 3 # High
    return np.nan

# Fungsi untuk HDL (HDL)
def HDL(HDL):
    if HDL < 40:
        return 1 # Low (poor)
    elif 40 <= HDL <= 59:
        return 2 # Acceptable
    elif HDL > 59:
        return 3 # Optimal (good)


# Fungsi untuk LDL (LDL)
def LDL(LDL):
    if LDL < 100:
        return 1 # Optimal
    elif 100 <= LDL <= 129:
        return 2 # Near Optimal
    elif 130 <= LDL <= 159:
        return 3 # Borderline High
    elif 160 <= LDL <= 189:
        return 4 # High
    elif LDL >= 190:
        return 5 # Very High


# Fungsi untuk tri_catg (triglyceride)
def tri(triglyceride):
    if triglyceride < 150:
        return 1 # Optimal
    elif 150 <= triglyceride <= 199:
        return 2 # Intermediate
    elif 199 < triglyceride: # Di notebook Anda 199 < triglyceride, saya sesuaikan menjadi >= 200
        return 3 # High


# Fungsi untuk hemo_catg (hemoglobin)
def hemo(hemoglobin):
    # Disesuaikan dengan rentang yang masuk akal dan yang ada di notebook
    if hemoglobin < 14.0:
        return 1 # Rendah
    elif 14.0 <= hemoglobin <= 18.0:
        return 2 # Normal
    elif hemoglobin > 18.0:
        return 3 # Tinggi


# Fungsi untuk Urine protein (UP_1)
def UP_1(Urine_protein):
    # Mengikuti kategori 1, 2, 3, 4, 5, 6
    if 1 <= Urine_protein <= 4:
        return Urine_protein
    elif Urine_protein > 4:
        return 4

# Fungsi untuk SC_catg (serum creatinine)
def SC_catg(serum_creatinine):
    # Rentang umum untuk pria dan wanita
    if serum_creatinine < 0.75:
        return 1 # Rendah
    elif 0.74 <= serum_creatinine <= 1.35:
        return 2 # Normal
    elif serum_creatinine > 1.35:
        return 3 # Tinggi


# Fungsi untuk AST_func
def AST_func(AST):
    if AST < 10:
        return 1 # low
    elif 10 <= AST <= 40:
        return 2 # normal
    elif AST > 40:
        return 3 # high


# Fungsi untuk ALT_catg
def ALT_func(ALT):
    if ALT < 4:
        return 1 # low
    elif 4 <= ALT <= 36:
        return 2 # normal
    elif ALT > 36:
        return 3 # high

# Fungsi untuk Gtp_catg
def gtp(Gtp):
    if Gtp < 8:
        return 1 # low
    elif 8 <= Gtp <= 60:
        return 2 # normal
    elif Gtp > 60:
        return 3 # high

"""#make CustomFeatureEngneering()"""

# --- 3. Buat Custom Transformer untuk Feature Engineering ---

class CustomFeatureEngineer(BaseEstimator, TransformerMixin):
    def __init__(self):
        # Inisialisasi dictionary untuk menyimpan mapping persentase
        self.percentage_map_age = None
        self.percentage_map_bmi = None
        self.percentage_map_esl = None
        self.percentage_map_esr = None
        self.percentage_map_bp = None
        self.percentage_map_bs = None
        self.percentage_map_chol = None
        self.percentage_map_hdl = None
        self.percentage_map_ldl = None
        self.percentage_map_tri = None
        self.percentage_map_hemo = None
        self.percentage_map_up = None
        self.percentage_map_sc = None
        self.percentage_map_ast = None
        self.percentage_map_alt = None
        self.percentage_map_gtp = None
        self.percentage_map_dc = None # Untuk dental caries

        # Simpan kolom yang akan di-drop setelah FE
        self.columns_to_drop_after_fe = [
        'age_catg', 'BMI_catg', 'ESL_catg', 'ESR_catg', 'BS_catg', 'chol_catg', 'HDL_catg',
        'LDL_catg', 'tri_catg', 'hemo_catg', 'SC_catg', 'AST_catg', 'ALT_catg', 'Gtp_catg'
         ]

        # Daftar kolom setelah FE yang diharapkan
        self.feature_columns_after_engineering = [
        'age', 'height(cm)', 'weight(kg)', 'eyesight(left)', 'eyesight(right)', 'hearing(left)',
        'hearing(right)', 'systolic', 'relaxation', 'fasting blood sugar', 'Cholesterol',
        'triglyceride', 'HDL', 'LDL', 'hemoglobin', 'Urine protein', 'serum creatinine', 'AST', 'ALT',
        'Gtp', 'dental caries', '%smoker_age', 'BMI', '%smoker_BMI_catg',
        '%ESL', '%ESR', 'BloodPressure', '%smoker_BloodPressure', '%smoker_BS_catg', '%smoker_chol_catg',
        '%smoker_HDL_catg', '%smoker_LDL_catg', '%smoker_tri_catg', '%smoker_hemo_catg',
        'UP_1', '%smoker_UP_1', '%smoker_SC', '%smoker_AST_catg', '%smoker_ALT_catg',
        '%smoker_Gtp_catg', '%smoker_DC'

        ]


    def fit(self, X, y=None):
        # 'fit' akan menghitung semua mapping persentase yang dibutuhkan
        # X di sini adalah DataFrame yang berisi fitur-fitur, y adalah kolom 'smoking'
        df_train = X.copy() # Bekerja pada salinan DataFrame

        # Feature Engineering dari notebook, disesuaikan agar bekerja pada df_train
        # Ini akan dilakukan di metode fit untuk menghitung persentase
        # dan di metode transform untuk diterapkan pada data baru

        # 1. age_catg dan %smoker_age
        df_train['age_catg'] = df_train['age'].apply(age_group)
        smoker_per_age_catg = df_train.groupby('age_catg')['smoking'].sum()
        total_per_age_catg = df_train['age_catg'].value_counts()
        percentage_smoker_per_age_catg = (smoker_per_age_catg / total_per_age_catg).fillna(0) # Handle div by zero
        self.percentage_map_age = percentage_smoker_per_age_catg.to_dict()

        # 2. BMI, BMI_catg dan %smoker_BMI_catg
        df_train['BMI'] = df_train['weight(kg)'] / ((df_train['height(cm)'] / 100) ** 2)
        df_train['BMI_catg'] = df_train['BMI'].apply(BMI_category)
        smoker_per_BMI_catg = df_train.groupby('BMI_catg')['smoking'].sum()
        total_per_BMI_catg = df_train['BMI_catg'].value_counts()
        percentage_smokers_each_BMI_catg = (smoker_per_BMI_catg / total_per_BMI_catg).fillna(0)
        self.percentage_map_bmi = percentage_smokers_each_BMI_catg.to_dict()

        # 3. ESL_catg dan %ESL
        df_train['ESL_catg'] = df_train['eyesight(left)'].apply(ESL_catg)
        smoker_per_eyesight_L_catg = df_train.groupby('ESL_catg')['smoking'].sum()
        total_per_eyesight_L_catg = df_train['ESL_catg'].value_counts()
        percentage_by_ESL_catg = (smoker_per_eyesight_L_catg / total_per_eyesight_L_catg).fillna(0)
        self.percentage_map_esl = percentage_by_ESL_catg.to_dict()

        # 4. ESR_catg dan %ESR
        df_train['ESR_catg'] = df_train['eyesight(right)'].apply(ESR_catg)
        smoker_per_eyesight_R_catg = df_train.groupby('ESR_catg')['smoking'].sum()
        total_per_eyesight_R_catg = df_train['ESR_catg'].value_counts()
        percentage_by_ESR_catg = (smoker_per_eyesight_R_catg / total_per_eyesight_R_catg).fillna(0)
        self.percentage_map_esr = percentage_by_ESR_catg.to_dict()

        # 5. BloodPressure dan %smoker_BloodPressure
        df_train['BloodPressure'] = df_train['systolic'] + df_train['relaxation']
        smoker_per_BloodPressure = df_train.groupby('BloodPressure')['smoking'].sum()
        total_per_BloodPressure = df_train['BloodPressure'].value_counts()
        percentage_by_BloodPressure = (smoker_per_BloodPressure / total_per_BloodPressure).fillna(0)
        self.percentage_map_bp = percentage_by_BloodPressure.to_dict()

        # 6. BS_catg dan %smoker_BS_catg
        df_train['BS_catg'] = df_train['fasting blood sugar'].apply(BS_catg)
        smoker_per_BS_catg = df_train.groupby('BS_catg')['smoking'].sum()
        total_per_BS_catg = df_train['BS_catg'].value_counts()
        percentage_smoker_by_BS_catg = (smoker_per_BS_catg / total_per_BS_catg).fillna(0)
        self.percentage_map_bs = percentage_smoker_by_BS_catg.to_dict()

        # 7. chol_catg dan %smoker_chol_catg
        df_train['chol_catg'] = df_train['Cholesterol'].apply(chol)
        smoker_per_chol_catg = df_train.groupby('chol_catg')['smoking'].sum()
        total_per_chol_catg = df_train['chol_catg'].value_counts()
        percentage_smoker_by_chol_catg = (smoker_per_chol_catg / total_per_chol_catg).fillna(0)
        self.percentage_map_chol = percentage_smoker_by_chol_catg.to_dict()

        # 8. HDL_catg dan %smoker_HDL_catg
        df_train['HDL_catg'] = df_train['HDL'].apply(HDL)
        smoker_per_HDL_catg = df_train.groupby('HDL_catg')['smoking'].sum()
        total_per_HDL_catg = df_train['HDL_catg'].value_counts()
        percentage_smoker_by_HDL_catg = (smoker_per_HDL_catg / total_per_HDL_catg).fillna(0)
        self.percentage_map_hdl = percentage_smoker_by_HDL_catg.to_dict()

        # 9. LDL_catg dan %smoker_LDL_catg
        df_train['LDL_catg'] = df_train['LDL'].apply(LDL)
        smoker_per_LDL_catg = df_train.groupby('LDL_catg')['smoking'].sum()
        total_per_LDL_catg = df_train['LDL_catg'].value_counts()
        percentage_smoker_by_LDL_catg = (smoker_per_LDL_catg / total_per_LDL_catg).fillna(0)
        self.percentage_map_ldl = percentage_smoker_by_LDL_catg.to_dict()

        # 10. tri_catg dan %smoker_tri_catg
        df_train['tri_catg'] = df_train['triglyceride'].apply(tri)
        smoker_per_tri_catg = df_train.groupby('tri_catg')['smoking'].sum()
        total_per_tri_catg = df_train['tri_catg'].value_counts()
        percentage_smoker_by_tri_catg = (smoker_per_tri_catg / total_per_tri_catg).fillna(0)
        self.percentage_map_tri = percentage_smoker_by_tri_catg.to_dict()

        # 11. hemo_catg dan %smoker_hemo_catg
        df_train['hemo_catg'] = df_train['hemoglobin'].apply(hemo)
        smoker_per_hemo_catg = df_train.groupby('hemo_catg')['smoking'].sum()
        total_per_hemo_catg = df_train['hemo_catg'].value_counts()
        percentage_smoker_by_hemo_catg = (smoker_per_hemo_catg / total_per_hemo_catg).fillna(0)
        self.percentage_map_hemo = percentage_smoker_by_hemo_catg.to_dict()

        # 12. UP_1 dan %smoker_UP_1
        df_train['UP_1'] = df_train['Urine protein'].apply(UP_1)
        smoker_per_UP = df_train.groupby('UP_1')['smoking'].sum()
        total_per_UP = df_train['UP_1'].value_counts()
        percentage_smoker_by_UP = (smoker_per_UP / total_per_UP).fillna(0)
        self.percentage_map_up = percentage_smoker_by_UP.to_dict()

        # 13. SC_catg dan %smoker_SC
        df_train['SC_catg'] = df_train['serum creatinine'].apply(SC_catg)
        smoker_per_SC = df_train.groupby('SC_catg')['smoking'].sum()
        total_per_SC = df_train['SC_catg'].value_counts()
        percentage_smoker_by_SC = (smoker_per_SC / total_per_SC).fillna(0)
        self.percentage_map_sc = percentage_smoker_by_SC.to_dict()

        # 14. AST_catg dan %smoker_AST_catg
        df_train['AST_catg'] = df_train['AST'].apply(AST_func)
        smoker_per_AST_catg = df_train.groupby('AST_catg')['smoking'].sum()
        total_per_AST_catg = df_train['AST_catg'].value_counts()
        percentage_smoker_by_AST_catg = (smoker_per_AST_catg / total_per_AST_catg).fillna(0)
        self.percentage_map_ast = percentage_smoker_by_AST_catg.to_dict()

        # 15. ALT_catg dan %smoker_ALT_catg
        df_train['ALT_catg'] = df_train['ALT'].apply(ALT_func)
        smoker_per_ALT_catg = df_train.groupby('ALT_catg')['smoking'].sum()
        total_per_ALT_catg = df_train['ALT_catg'].value_counts()
        percentage_smoker_by_ALT_catg = (smoker_per_ALT_catg / total_per_ALT_catg).fillna(0)
        self.percentage_map_alt = percentage_smoker_by_ALT_catg.to_dict()

        # 16. Gtp_catg dan %smoker_Gtp_catg
        df_train['Gtp_catg'] = df_train['Gtp'].apply(gtp)
        smoker_per_Gtp_catg = df_train.groupby('Gtp_catg')['smoking'].sum()
        total_per_Gtp_catg = df_train['Gtp_catg'].value_counts()
        percentage_smoker_by_Gtp_catg = (smoker_per_Gtp_catg / total_per_Gtp_catg).fillna(0)
        self.percentage_map_gtp = percentage_smoker_by_Gtp_catg.to_dict()

        # 17. %smoker_DC
        smoker_per_DC = df_train.groupby('dental caries')['smoking'].sum()
        total_per_DC = df_train['dental caries'].value_counts()
        percentage_smoker_by_DC = (smoker_per_DC / total_per_DC).fillna(0)
        self.percentage_map_dc = percentage_smoker_by_DC.to_dict()


        return self

    def transform(self, X):
        # 'transform' akan menerapkan semua transformasi yang dipelajari di 'fit'
        # X di sini adalah DataFrame input yang baru (bisa 1 baris dari form atau banyak baris)
        df_transformed = X.copy() # Bekerja pada salinan DataFrame input

        # Pastikan kolom 'smoking' tidak ada di input for transform, jika ada, drop.
        # This is because df_train in your notebook has 'smoking', but application input does not.
        if 'smoking' in df_transformed.columns:
            df_transformed = df_transformed.drop(columns=['smoking'])

        # Terapkan transformasi sesuai urutan di notebook Anda
        df_transformed['age_catg'] = df_transformed['age'].apply(age_group)
        df_transformed['%smoker_age'] = df_transformed['age_catg'].map(self.percentage_map_age).fillna(0)

        df_transformed['BMI'] = df_transformed['weight(kg)'] / ((df_transformed['height(cm)'] / 100) ** 2)
        df_transformed['BMI_catg'] = df_transformed['BMI'].apply(BMI_category)
        df_transformed['%smoker_BMI_catg'] = df_transformed['BMI_catg'].map(self.percentage_map_bmi).fillna(0)

        df_transformed['ESL_catg'] = df_transformed['eyesight(left)'].apply(ESL_catg)
        df_transformed['%ESL'] = df_transformed['ESL_catg'].map(self.percentage_map_esl).fillna(0)

        df_transformed['ESR_catg'] = df_transformed['eyesight(right)'].apply(ESR_catg)
        df_transformed['%ESR'] = df_transformed['ESR_catg'].map(self.percentage_map_esr).fillna(0)

        df_transformed['BloodPressure'] = df_transformed['systolic'] + df_transformed['relaxation']
        df_transformed['%smoker_BloodPressure'] = df_transformed['BloodPressure'].map(self.percentage_map_bp).fillna(0)

        df_transformed['BS_catg'] = df_transformed['fasting blood sugar'].apply(BS_catg)
        df_transformed['%smoker_BS_catg'] = df_transformed['BS_catg'].map(self.percentage_map_bs).fillna(0)

        df_transformed['chol_catg'] = df_transformed['Cholesterol'].apply(chol)
        df_transformed['%smoker_chol_catg'] = df_transformed['chol_catg'].map(self.percentage_map_chol).fillna(0)

        df_transformed['HDL_catg'] = df_transformed['HDL'].apply(HDL)
        df_transformed['%smoker_HDL_catg'] = df_transformed['HDL_catg'].map(self.percentage_map_hdl).fillna(0)

        df_transformed['LDL_catg'] = df_transformed['LDL'].apply(LDL)
        df_transformed['%smoker_LDL_catg'] = df_transformed['LDL_catg'].map(self.percentage_map_ldl).fillna(0)

        df_transformed['tri_catg'] = df_transformed['triglyceride'].apply(tri)
        df_transformed['%smoker_tri_catg'] = df_transformed['tri_catg'].map(self.percentage_map_tri).fillna(0)

        df_transformed['hemo_catg'] = df_transformed['hemoglobin'].apply(hemo)
        df_transformed['%smoker_hemo_catg'] = df_transformed['hemo_catg'].map(self.percentage_map_hemo).fillna(0)

        df_transformed['UP_1'] = df_transformed['Urine protein'].apply(UP_1)
        df_transformed['%smoker_UP_1'] = df_transformed['UP_1'].map(self.percentage_map_up).fillna(0)

        df_transformed['SC_catg'] = df_transformed['serum creatinine'].apply(SC_catg)
        df_transformed['%smoker_SC'] = df_transformed['SC_catg'].map(self.percentage_map_sc).fillna(0)

        df_transformed['AST_catg'] = df_transformed['AST'].apply(AST_func)
        df_transformed['%smoker_AST_catg'] = df_transformed['AST_catg'].map(self.percentage_map_ast).fillna(0)

        df_transformed['ALT_catg'] = df_transformed['ALT'].apply(ALT_func)
        df_transformed['%smoker_ALT_catg'] = df_transformed['ALT_catg'].map(self.percentage_map_alt).fillna(0)

        df_transformed['Gtp_catg'] = df_transformed['Gtp'].apply(gtp)
        df_transformed['%smoker_Gtp_catg'] = df_transformed['Gtp_catg'].map(self.percentage_map_gtp).fillna(0)

        df_transformed['%smoker_DC'] = df_transformed['dental caries'].map(self.percentage_map_dc).fillna(0)

        # After all FE, drop original columns that are no longer needed as features
        # Some original columns are retained because they are still main features
        # e.g., age, height(cm), weight(kg), eyesight(left), etc.
        # This list needs to be verified again

        # Identify columns to drop after FE, excluding the 'smoking' column (already dropped above)
        # and the original columns that will remain
        original_cols_to_keep = [
            'age', 'height(cm)', 'weight(kg)', 'eyesight(left)', 'eyesight(right)',
            'hearing(left)', 'hearing(right)', 'systolic', 'relaxation',
            'fasting blood sugar', 'Cholesterol', 'triglyceride', 'HDL', 'LDL',
            'hemoglobin', 'Urine protein', 'serum creatinine', 'AST', 'ALT', 'Gtp',
            'dental caries'
        ]

        # Filter columns to keep only the desired columns
        # Ensure all columns in self.feature_columns_after_engineering are in df_transformed
        # Remove 'smoking' from the expected columns list for the final dataframe
        expected_cols_for_final_df = [col for col in self.feature_columns_after_engineering if col != 'smoking']


        missing_cols = [col for col in expected_cols_for_final_df if col not in df_transformed.columns]
        if missing_cols:
            print(f"WARNING: The following columns were not found in the DataFrame after transformation: {missing_cols}")
            # You may need to adjust the logic or FE function if this happens

        # Ensure the column order matches the expected order
        df_final = df_transformed[expected_cols_for_final_df]

        return df_final

# --- 4. Inisialisasi dan Latih Custom Transformer ---
# Pisahkan fitur (X) dan target (y) dari train_data untuk melatih transformer
# INGAT: train_data di sini masih memiliki kolom 'smoking'
# Anda memanggil fit dengan train_data lengkap agar transformer dapat menghitung
# persentase smoker per kategori berdasarkan data pelatihan

feature_engineer = CustomFeatureEngineer()
feature_engineer.fit(df_train) # Fit transformer dengan train_data lengkap (termasuk 'smoking')

"""## Save CustomFeatureEngineer()"""

# save CustomeFeatureEngineering()
import joblib
model_filename = r'D:\FINAL_PROJECT_1\app\model\CustomFeatureEngineer.joblib'

# Pastikan direktori tujuan ada. Ini sangat penting.
# Buat folder 'model' jika belum ada, relatif terhadap D:\FINAL_PROJECT_1\app
model_save_dir_path = os.path.join(os.path.dirname(model_filename), '') # Mendapatkan D:\FINAL_PROJECT_1\app\model\
os.makedirs(model_save_dir_path, exist_ok=True)

joblib.dump(feature_engineer, model_filename)
print(f"Model disimpan di: {model_filename}")


